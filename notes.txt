cccccrrrrrrrrbbb

Start mem - 16
Bytes - 3
Read or write - 1
Data to write (max 8 bytes) - 64
Return value - ?

Pop top mem location in queue
If (bbb + Bytes) overflows, then (we need to access multiple cells)
	Bytes2 = 1000 - bbb
	Read or write Bytes2 bytes to start mem
	Bytes2 = Bytes - Bytes2
	Read or write Bytes2 bytes to ccccc(rrrrrrrr + 1)000
else
	Simple write


Simple, single-process computer.
Virtual memory template can be loaded. Templates are something like this: [add][divider][add][divider][callback]
Call stack, something like this:
	[Exit][OS][Process][Caller]^[Func]
	Each command, [Func] is incremented:
	[Exit][OS][Process][Caller]^[Func + 1]
	
	If Func reaches end of loaded memory:
		Load next 8 bytes after Func
	If return is called:
		Control is returned to caller:
		[Exit][OS][Process]^[Caller][Func] ([Func will never be accessed again, probably overwritten soon.])


Each block is 8x16 bits (8x2 bytes). Blocks are arranged into cores 32x32. The memory is split into 4 cores, for parallel access.

As the electrons move, the lower bits (1, 2, 4, ...) come first.

Byte:
ccjijijijijixxxy.bbb
c=core
i=block col
j=block row
x=inter-block col
y=inter-block row
b=bit

Lower level
ccyxyxyxyxyxxxxy.yyy
c=core
x=col
y=row

Memory addresses refer to bytes, not bits.

0123456789abcdef   012468af3579bcde
ccyxyxyxyxyxxxxy > ccyyyyyyxxxxxxxx

This conversion must be the last step before accessing the memory.

Read sequence:
Input address as d, number of bytes to read as n.
Send address1 n * 8 times.

Write sequence:
Input command, address, and data.
Compute data delta foreach bit. 10011101 > 11010011
Foreach bit of data delta, send address to flip.

Negative means delay
Positive means advance

Raw bit shifts
0 = 0
1 = 0
2 = 0
3 = 5
4 = -1
5 = 4
6 = -2
7 = 3
8 = -3
9 = 2
a = -4
b = 1
c = 1
d = 1
e = 1
f = -8

Normalized bit shifts to eliminate advances:
0 = -5
1 = -5
2 = -5
3 = 0
4 = -6
5 = -1
6 = -7
7 = -2
8 = -8
9 = -3
a = -9
b = -4
c = -4
d = -4
e = -4
f = -13

Inter-core addressing:
2 bits for addressing the core
8 bits for addressing the col
9 bits for addressing the row (one of these bits is sent as a delay, not in the parallel address with the others)

CPU-visible addressing:
2 bits for addressing the core
8 bits for addressing the col
6 bits for addressing the row (Cannot address individual bits)
Total 16-bit address

Reading:
get_shutoff_col(00000000 = 0) = 00001000 = 8
get_shutoff_col(00000111 = 7) = 00001000 = 8
get_shutoff_col(00001000 = 8) = 00010000 = 16
get_shutoff_col(00001001 = 9) = 00010000 = 16
get_shutoff_col(x) = ((first 5 bits of x) + 1) concat 000

969675

Reading:
	2 particles will be sent on the appropriate column, the first one to read, and the second one to xor the bits back to their original state.
	4 particles will be sent to the top row of the memory block, the first two to start the read loop, and when reading is finished, the last 2 will stop the read loop.
	2 particles will be sent to a row above the read block, to stop the first 2 particles from sending unused data.

Writing:
	First, the bytes to write to will be read, and xored with the write data, which will give the bytes that need to be flipped.
	